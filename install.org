{{{header(install,Richard Westhaver,ellis@rwest.io,core installation
guide)}}} 
The core is distributed via our public package registry:
[[https://packy.compiler.company][packy.compiler.company]]. You can install any part of the core - from a
complete Linux system to individual packages. Refer to the packy
documentation for details.

The simplest way to get started is by getting the installer for your
platform with the following script:

#+begin_src shell :results pp replace :exports both :noeval t
curl --proto '=https' --tlsv1.2 -sSf https://packy.compiler.company/do/init.sh | sh # -s -- --help
#+end_src

#+RESULTS:
#+begin_example

cc-init 0.1.0-0941fa04c53d+

Usage: cc-init [OPTIONS]

Options:
  -y              Disable confirmation prompts
  -l, --level...  Set the log level
  -h, --help      Print help
  -V, --version   Print version
#+end_example
* TODO Packages
- State "TODO"       from              [2023-11-25 Sat 18:28]
** Crates                                                              :rust:
** ELPA                                                               :emacs:
** Quicklisp                                                           :lisp:
** AUR                                                               :pacman:
* Images
We also ship FASL images for Lisp. These images can be downloaded and
loaded using the =--core= option of your lisp compiler like so:

#+begin_src shell
sbcl --core std.core
#+end_src

See [[https://www.sbcl.org/manual/#FASL-Format][FASL Format]] for details. Keep in mind that the FASL format is not
portable - they are tied to a specific version of the compiler and we
don't keep old versions around for long.
* Apps
** Lisp
*** cli/skel
#+begin_src shell :results pp replace :exports code
  sbcl --noinform  --non-interactive \
    --eval '(ql:quickload :cli/skel)' \
    --eval "(asdf:make :cli/skel)"
  mv lisp/app/cli/skel ~/.local/bin/
#+end_src

#+RESULTS:
#+begin_example
To load "cli/skel":
  Load 1 ASDF system:
    cli/skel
; Loading "cli/skel"
..................................................
[package rocksdb/pkg].............................
[package nlp/data]................................
[package nlp/stem/porter].........................
[package nlp/tokenize]............................
[package nlp/doc].................................
[package nlp/textrank]............................
[package nlp/dbscan]..............................
[package nlp/section].............................
[package skel/core/virt]..........................
[package skel/core/vm]............................
[package skel/comp/make]..........................
[package skel/comp/containerfile].................
[package skel/comp/ignore]..
compressed 32768 bytes into 5078 at level 9
compressed 236388352 bytes into 9439837 at level 9
compressed 8388608 bytes into 2587546 at level 9
compressed 0 bytes into 9 at level 9
#+end_example

*** cli/organ
#+begin_src shell :results pp replace :exports code
  sbcl --noinform  --non-interactive \
    --eval '(ql:quickload :cli/organ)' \
    --eval "(asdf:make :cli/organ)"
  mv lisp/app/cli/organ ~/.local/bin/
#+end_src

#+RESULTS:
#+begin_example
To load "cli/organ":
  Load 1 ASDF system:
    cli/organ
; Loading "cli/organ"
..................................................
[package cli/organ].
compressed 32768 bytes into 5082 at level 9
compressed 236388352 bytes into 9296021 at level 9
compressed 8355840 bytes into 2571330 at level 9
compressed 0 bytes into 9 at level 9
#+end_example

*** cli/rdb
#+begin_src shell :results pp replace :exports code
  sbcl --noinform  --non-interactive \
    --eval '(ql:quickload :cli/rdb)' \
    --eval "(asdf:make :cli/rdb)"
  mv lisp/app/cli/rdb ~/.local/bin/
#+end_src

#+RESULTS:
: To load "cli/rdb":
:   Load 1 ASDF system:
:     cli/rdb
: ; Loading "cli/rdb"
: ..
: compressed 32768 bytes into 5087 at level 9
: compressed 236388352 bytes into 9214043 at level 9
: compressed 8257536 bytes into 2554086 at level 9
: compressed 0 bytes into 9 at level 9

*** cli/homer
#+begin_src shell :results pp replace :exports code
  sbcl --noinform  --non-interactive \
    --eval '(ql:quickload :cli/homer)' \
    --eval "(asdf:make :cli/homer)"
  mv lisp/app/cli/homer ~/.local/bin/
#+end_src

#+RESULTS:
#+begin_example
To load "cli/homer":
  Load 1 ASDF system:
    cli/homer
; Loading "cli/homer"
..................................................
[package cli/homer]
compressed 32768 bytes into 5074 at level 9
compressed 236388352 bytes into 9388341 at level 9
compressed 8388608 bytes into 2586302 at level 9
compressed 0 bytes into 9 at level 9
#+end_example

** Rust
*** cli/cc-init
#+begin_src shell :results output pp :exports code
  cd rust/app/cli/cc-init && cargo install --path .
#+end_src

#+RESULTS:

*** cli/tz
#+begin_src shell :results output pp :exports code
  cd rust/app/cli/tz && cargo install --path .
#+end_src

#+RESULTS:

*** cli/mailman
#+begin_src shell :results output pp :exports code
  cd rust/app/cli/cc-install && cargo install --path .
#+end_src

#+RESULTS:

*** cli/krypt
#+begin_src shell :results output pp :exports code
  cd rust/app/cli/krypt && cargo install --path .
#+end_src

#+RESULTS:

* Source
