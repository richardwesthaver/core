(defpackage :rdb/tests
  (:use :cl :std :std/alien :std/rt :rdb))
(in-package :rdb/tests)
(defsuite :rdb)
(in-suite :rdb)
(rocksdb:load-rocksdb)

(deftest with-db ()
  "Test the WITH-OPEN-DB macro and some basic functions."
  (with-open-db (db "/tmp/rdb" (make-rdb-opts :create-if-missing t :destroy t))
    (dotimes (i 10000)
      (let ((k (format nil "key~d" i))
            (v (format nil "val~d" i)))
        (put-kv-str db k v)))))

(deftest with-iter (:persist t)
  "Test the WITH-ITER macro."
  (let ((ro (rocksdb:rocksdb-readoptions-create)))
    (with-open-db (db "/tmp/rdb-iter" (make-rdb-opts :create-if-missing t :destroy t))
      (put-kv-str db "ak" "av")
      (put-kv-str db "bk" "bv")
      ;; (rocksdb:rocksdb-cancel-all-background-work db t)
      (is (equal (get-kv-str db "ak") "av"))
      (is (equal (get-kv-str db "bk") "bv"))
      (with-iter (it db ro)
        (rocksdb:rocksdb-iter-seek-to-first it)
        (is (rocksdb:rocksdb-iter-valid it))
        (is (equal (iter-key-str it) "ak"))
        (is (equal (get-kv-str db "ak") "av"))
        (rocksdb:rocksdb-iter-next it)
        (is (rocksdb:rocksdb-iter-valid it))
        (is (equal (iter-key-str it) "bk"))
        (is (equal (iter-val-str it) "bv"))
        (rocksdb:rocksdb-iter-next it)
        (is (not (rocksdb:rocksdb-iter-valid it)))
        ))))
