#+TITLE: comp/core
#+AUTHOR: Richard Westhaver
#+EMAIL: ellis@rwest.io
#+DESCRIPTION: The core of The Compiler Company software stack
This repository contains a collection of software libraries shared
across all of our products and projects.

The basic structure consists of a top-level directory for each
significant language we speak. As of [2023-10-26 Thu] this includes
Common Lisp, Emacs Lisp, and Rust.

- NOTE :: This is *not* a portable library. Starting in version =1.0=
  we will be depending on downstream forks of SBCL and Rust.

To bootstrap the core you will need recent versions of [[https://www.gnu.org/software/emacs/][GNU Emacs]],
[[https://www.rust-lang.org/][Rust]], and [[http://www.sbcl.org/][SBCL]]. For SBCL you will need to build from source with
=:sb-core-compression= enabled[fn:1].

We have a strong preference for vendoring our dependencies. The
'super-repos' [[https://lab.rwest.io/comp/shed][shed]] and [[https://lab.rwest.io/comp/stash][stash]] contain all relevant source trees which
we build via CI and ship to production as well as use internally.

[fn:1] [[http://www.sbcl.org/manual/#Saving-a-Core-Image][SBCL Manual - Saving a Core Image]] 

* rust
** sys
*** btrfs
*** btrfsutil
** lib
*** alch
*** audio
#+begin_src shell :dir rust/lib/audio :results output replace :exports results
cargo test
#+end_src
#+RESULTS:
#+begin_example

running 1 test
test default_device ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.11s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

#+end_example
*** crypto
*** db
*** flate
#+begin_src shell :dir rust/lib/flate :results output replace :exports results
cargo test
#+end_src
#+RESULTS:
#+begin_example

running 1 test
test pack_test ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.10s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

#+end_example
*** hash
#+begin_src shell :dir rust/lib/hash :results output replace :exports results
cargo test
#+end_src
#+RESULTS:
#+begin_example

running 4 tests
test tests::id_hex ... ok
test tests::id_state_hash ... ok
test tests::rand_id ... ok
test tests::random_demon_id_is_valid ... ok

test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.03s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

#+end_example
*** krypt
*** logger
#+begin_src shell :dir rust/lib/logger :results output replace :exports results
cargo test
#+end_src
#+RESULTS:
#+begin_example

running 1 test
test tests::simple_init ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

#+end_example
*** sxp
#+begin_src shell :dir rust/lib/sxp :results output replace :exports results
cargo test
#+end_src
#+RESULTS:
#+begin_example

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 1 test
test canonical_fmt ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 5 tests
test list_form ... ok
test nil_form ... ok
test num_form ... ok
test str_form ... ok
test sym_form ... ok

test result: ok. 5 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 3 tests
test ser_enum ... ok
test ser_form ... ok
test ser_struct ... ok

test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 5 tests
test list_start_token ... ok
test list_end_token ... ok
test sym_token ... ok
test str_token ... ok
test num_token ... ok

test result: ok. 5 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

#+end_example
*** tenex
*** util
#+begin_src shell :dir rust/lib/util :results output replace :exports results
cargo test
#+end_src
#+RESULTS:
#+begin_example

running 1 test
test tests::test_related_paths ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

#+end_example
* lisp
#+begin_src lisp :results silent
  (let ((asds '("lisp/std.asd" "lisp/lib/rdb.asd" "lisp/lib/organ/organ.asd" "lisp/lib/skel/skel.asd"
                "lisp/ffi/rocksdb.asd" "lisp/ffi/btrfs.asd" "lisp/ffi/uring.asd")))
    (mapc (lambda (x) (asdf:load-asd (pathname x))) asds))
  (asdf:load-system :std)
#+end_src
** std
*** tests
#+begin_src lisp :package std/tests :results output replace :exports results
  (load "lisp/std/tests.lisp")
  (load "lisp/std/tests/sxp.lisp")
  (rt:do-tests :named-readtables)
  (rt:do-tests :std)  
  (rt:do-tests :rt)
  (rt:do-tests :cli)
  (in-package :std/tests/sxp)
  (setq *sxp-test-file* "lisp/std/tests/tests.sxp")
  (rt:do-tests :sxp)
#+end_src
#+RESULTS:
#+begin_example
in suite NAMED-READTABLES with 1/1 tests:
#<PASS READTABLES-TEST1041> 
No tests failed.
in suite STD with 10/10 tests:
#<PASS PAN-TEST1051> 
#<PASS ANA-TEST1050> 
#<PASS FMT-TEST1049> 
#<PASS ALIEN-TEST1048> 
#<PASS THREAD-TEST1047> 
#<PASS COND-TEST1046> 
#<PASS LOG-TEST1045> 
#<PASS LIST-TEST1044> 
#<PASS STR-TEST1043> 
#<PASS SYM-TEST1042> 
No tests failed.
in suite RT with 1/1 tests:
#<PASS RT-TEST1052> 
No tests failed.
in suite CLI with 1/1 tests:
#<PASS CLI-TEST1053> 
No tests failed.
in suite SXP with 4/4 tests:
#<PASS SXP-STREAM-TEST1057> 
#<PASS SXP-STRING-TEST1056> 
#<PASS SXP-FILE-TEST1055> 
#<PASS FORMS-TEST1054> 
No tests failed.
#+end_example
** lib
*** rdb
**** tests
#+begin_src lisp :package rdb.tests :results output replace :exports results
  (asdf:load-system :rdb/tests)
  (in-package :rdb/tests)
  (load "lisp/lib/rdb/tests.lisp")
  (setq log:*log-level* :debug)
  (rt:do-tests :rdb)
#+end_src
#+RESULTS:
: in suite RDB with 0/0 tests:
: No tests failed.
*** organ
**** tests
#+begin_src lisp :package organ.tests :results output replace :exports results
  (asdf:load-system :organ/tests)
  (in-package :organ.tests)
  (setq log:*log-level* :debug)
  (load "lisp/lib/organ/tests.lisp")
  (rt:do-tests :organ)
#+end_src
#+RESULTS:
#+begin_example
in suite ORGAN with 3/3 tests:
:DEBUG @ 12527.026  
; running test: 
; #<TEST ORG-HEADLINE :fn ORG-HEADLINE-test18308 :args NIL :persist NIL {1005FBD213}>
:DEBUG @ 12527.037  
; #<PASS (= (LEVEL (ORG-PARSE (MAKE-ORG-HEADLINE S))) 2)>
:DEBUG @ 12527.04  
; #<PASS (STRING= (TITLE (ORG-PARSE (MAKE-ORG-HEADLINE S))) DONE testing stuff )>
:DEBUG @ 12527.04  
; #<PASS (= (LENGTH (TAGS (ORG-PARSE (MAKE-ORG-HEADLINE S)))) 2)>
#<PASS ORG-HEADLINE-TEST18308> 
:DEBUG @ 12527.04  
; running test: 
; #<TEST ORG-LINES :fn ORG-LINES-test18307 :args NIL :persist NIL {1005FBAEE3}>
:DEBUG @ 12527.043  
; #<PASS (READ-ORG-LINES (OPEN *TEST-FILE*))>
:DEBUG @ 12527.043  
; #<PASS (READ-ORG-LINES-FROM-STRING S)>
#<PASS ORG-LINES-TEST18307> 
:DEBUG @ 12527.043  
; running test: 
; #<TEST ORG-FILE :fn ORG-FILE-test18306 :args NIL :persist NIL {1005FB96E3}>
:DEBUG @ 12527.047  
; #<PASS (READ-ORG-FILE *TEST-FILE*)>
#<PASS ORG-FILE-TEST18306> 
No tests failed.
#+end_example
*** skel
**** tests
#+begin_src lisp :package skel.tests :results output replace :exports results
  (asdf:load-system :skel/tests)
  (in-package :skel.tests)
  (load "lisp/lib/skel/tests.lisp")
  (setq *log-level* :debug)
  (rt:do-tests :skel)
#+end_src
#+RESULTS:
#+begin_example
; compiling file "/home/ellis/dev/skel/tests.lisp" (written 15 OCT 2023 03:10:25 AM):

; wrote /home/ellis/.cache/common-lisp/sbcl-2.3.8.18.master.74-8cf7faf9a-linux-x64/home/ellis/dev/skel/tests-tmpR8PK79V8.fasl
; compilation finished in 0:00:00.006
in suite SKEL with 6/6 tests:
:DEBUG @ 12500.617  
; running test: 
; #<TEST VM :fn VM-test17295 :args NIL :persist NIL {100713BF53}>
:DEBUG @ 12500.623  
; #<PASS (LET ((VM (MAKE-SK-VM C9)))
           (DOTIMES (I C8) (SKS-POP VM))
           T)>
:DEBUG @ 12500.623  
; #<PASS (SKS-POP VM)>
#<PASS VM-TEST17295> 
:DEBUG @ 12500.623  
; running test: 
; #<TEST MAKEFILE :fn MAKEFILE-test17294 :args NIL :persist NIL {100713A443}>
:DEBUG @ 12500.646  
; #<PASS (NULL (SK-WRITE-FILE (MK) IF-EXISTS SUPERSEDE PATH (TMP-PATH mk)))>
:DEBUG @ 12500.646  
; #<PASS (PUSH-RULE R1 MK1)>
:DEBUG @ 12500.646  
; #<PASS (PUSH-RULE R2 MK1)>
:DEBUG @ 12500.646  
; #<PASS (PUSH-DIRECTIVE
          (CMD ifeq ($(DEBUG),1) echo foo 
endif)
          MK1)>
:DEBUG @ 12500.646  
; #<PASS (PUSH-VAR '(A B) MK1)>
:DEBUG @ 12500.646  
; #<PASS (PUSH-VAR '(B C) MK1)>
#<PASS MAKEFILE-TEST17294> 
:DEBUG @ 12500.646  
; running test: 
; #<TEST SKELRC :fn SKELRC-test17293 :args NIL :persist NIL {1006FD6AF3}>
#<PASS SKELRC-TEST17293> 
:DEBUG @ 12500.65  
; running test: 
; #<TEST SKELFILE :fn SKELFILE-test17292 :args NIL :persist NIL {1006FD5843}>
:DEBUG @ 12500.663  
; #<PASS (SK-WRITE-FILE (MAKE-INSTANCE 'SK-PROJECT NAME nada PATH %TMP) PATH
                        %TMP IF-EXISTS SUPERSEDE)>
:DEBUG @ 12500.663  
; #<FAIL (INIT-SKELFILE %TMP)>
:DEBUG @ 12500.663  
; #<PASS (LOAD-SKELFILE %TMP)>
:DEBUG @ 12500.663  
; #<PASS (BUILD-AST (SK-READ-FILE (MAKE-INSTANCE 'SK-PROJECT) %TMP))>
#<PASS SKELFILE-TEST17292> 
:DEBUG @ 12500.663  
; running test: 
; #<TEST HEADER-COMMENTS :fn HEADER-COMMENTS-test17291 :args NIL :persist NIL {1006FD3893}>
:DEBUG @ 12500.667  
; #<PASS (EQ
          (TYPE-OF (MAKE-SHEBANG-FILE-HEADER (MAKE-SHEBANG-COMMENT /dev/null)))
          'FILE-HEADER)>
:DEBUG @ 12500.667  
; #<PASS (EQ
          (TYPE-OF
           (MAKE-SOURCE-FILE-HEADER
            (MAKE-SOURCE-HEADER-COMMENT foo-test TIMESTAMP T DESCRIPTION
                                        nothing to see here OPTS
                                        '(Definitely-Not_Emacs: T;))))
          'FILE-HEADER)>
#<PASS HEADER-COMMENTS-TEST17291> 
:DEBUG @ 12500.667  
; running test: 
; #<TEST SANITY :fn SANITY-test17290 :args NIL :persist NIL {1006FD1D83}>
:DEBUG @ 12500.67  
; #<PASS (EQ T (APPLY #'/= (SKELS 3E8)))>
#<PASS SANITY-TEST17290> 
No tests failed.
#+end_example
** ffi
*** btrfs
**** tests
#+begin_src lisp :package btrfs.tests :results output replace :exports results
  (asdf:load-system :btrfs/tests)
  (in-package :btrfs.tests)
  (load "lisp/ffi/btrfs/tests.lisp")
  (setq log:*log-level* :debug)
  (rt:do-tests :btrfs)
#+end_src
#+RESULTS:
: in suite BTRFS with 0/0 tests:
: No tests failed.
*** rocksdb
**** tests
#+begin_src lisp :package rocksdb.tests :results output replace :exports results
  (asdf:load-system :rocksdb/tests)
  (in-package :rocksdb.tests)
  (load "lisp/ffi/rocksdb/tests.lisp")
  (setq log:*log-level* :debug)
  (rt:do-tests :rocksdb)
#+end_src
#+RESULTS:
#+begin_example
in suite ROCKSDB with 2/2 tests:
:DEBUG @ 7288.927  
; running test: 
; #<TEST DB :fn DB-test991 :args NIL :persist NIL {10032DD7C3}>
:DEBUG @ 7288.98  
; #<PASS (NULL-ALIEN ERRPTR)>
:DEBUG @ 7288.98  
; #<PASS (NULL-ALIEN ERRPTR)>
:DEBUG @ 7288.98  
; #<PASS (STRING= (OCTETS-TO-STRING VAL)
                  (CONCATENATE 'STRING (MAP 'VECTOR #'CODE-CHAR RVAL)))>
:DEBUG @ 7288.98  
; #<PASS (NULL-ALIEN ERRPTR)>
#<PASS DB-TEST991> 
:DEBUG @ 7288.987  
; running test: 
; #<TEST SET-OPTS :fn SET-OPTS-test990 :args NIL :persist NIL {10031F2E43}>
#<PASS SET-OPTS-TEST990> 
No tests failed.
#+end_example
*** quiche
**** tests
#+begin_src lisp :package quiche.tests :results output replace :exports results
  (asdf:load-system :quiche/tests)
  (in-package :quiche.tests)
  (load "lisp/ffi/quiche/tests.lisp")
  (setq log:*log-level* :debug)
  (rt:do-tests :uring)
#+end_src
*** uring
**** tests
#+begin_src lisp :package uring.tests :results output replace :exports results
  (asdf:load-system :uring/tests)
  (in-package :uring.tests)
  (load "lisp/ffi/uring/tests.lisp")
  (setq log:*log-level* :debug)
  (rt:do-tests :uring)
#+end_src
#+RESULTS:
: in suite URING with 0/0 tests:
: No tests failed.
*** tree-sitter
**** tests
#+begin_src lisp :package tree-sitter.tests :results output replace :exports results
  (asdf:load-system :tree-sitter/tests)
  (in-package :tree-sitter.tests)
  (load "lisp/ffi/tree-sitter/tests.lisp")
  (setq log:*log-level* :debug)
  (rt:do-tests :tree-sitter)
#+end_src
#+RESULTS:
: in suite TREE-SITTER with 0/0 tests:
: No tests failed.
* emacs
There are a few internal packages that link to system libraries at
runtime - the following libraries need to be installed for a fully
functioning editor:

- libvoikko ::
  =sudo pacman -Syu libvoikko=
* lib
** sxp
** sk
** mq
